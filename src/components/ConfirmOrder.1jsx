import * as React from "react";
import { Transition } from "react-transition-group";
import Button from "@mui/joy/Button";
import Modal from "@mui/joy/Modal";
import ModalDialog from "@mui/joy/ModalDialog";
import DialogTitle from "@mui/joy/DialogTitle";
import DialogContent from "@mui/joy/DialogContent";

import { db } from "../config/firebaseConfig";
import { addDoc, collection } from "firebase/firestore";

import { useForm } from "react-hook-form";
import { useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";
import { clearOrder } from "../store/orderSlice";
import { useDispatch } from "react-redux";
import { currencyFormatter } from "../utils/formatter";

export default function FadeModalDialog() {
  const [open, setOpen] = React.useState(false);
  const orders = useSelector((state) => state.orders.orders);
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm();

  const getCartTotal = orders.reduce(
    (sum, order) => sum + order.totalAmount,
    0
  );
  const handleConfirmOrder = async (val) => {
    console.log(val);
    const orderItem = {
      items: orders,
      customer: {
        name: val.customer,
        phoneNumber: val.phoneNumber,
      },
      payment: val.payment,
    };
    const ordersRef = await addDoc(collection(db, "orders"), orderItem);

    //Check if document has been stored, destructure customers data out
    if (ordersRef) {
      await addDoc(collection(db, "customers"), orderItem);
    }
    reset();
    dispatch(clearOrder());
    navigate("/orders");
  };

  ////Paystack payment
  const handlePaystack = () => {
    window.location.href = "https://paystack.shop/pay/vt_h4j1yeo1";
  };

  return (
    <React.Fragment>
      <Button variant="outlined" color="primary" onClick={() => setOpen(true)}>
        Confirm Order
      </Button>
      <Transition in={open} timeout={400}>
        {(state) => (
          <Modal
            keepMounted
            open={!["exited", "exiting"].includes(state)}
            onClose={() => setOpen(false)}
            slotProps={{
              backdrop: {
                sx: {
                  opacity: 0,
                  backdropFilter: "none",
                  transition: `opacity 400ms, backdrop-filter 400ms`,
                  ...{
                    entering: { opacity: 1, backdropFilter: "blur(8px)" },
                    entered: { opacity: 1, backdropFilter: "blur(8px)" },
                  }[state],
                },
              },
            }}
            sx={{
              visibility: state === "exited" ? "hidden" : "visible",
            }}
          >
            <ModalDialog
              sx={{
                opacity: 0,
                transition: `opacity 300ms`,
                ...{
                  entering: { opacity: 1 },
                  entered: { opacity: 1 },
                }[state],
              }}
            >
              <DialogTitle>
                <div className="flex justify-between items-center w-full ">
                  <p className="font-mono text-orange-400 mx-10 text-xl mt-10 ">
                    {" "}
                    COMPLETE ORDER
                  </p>
                  {orders.length > 0 && (
                    <p className="font-mono text-slate-800 mx-10 text-md mt-10 border border-slate-500 rounded-md p-2">
                      {currencyFormatter(getCartTotal)}{" "}
                    </p>
                  )}
                </div>
              </DialogTitle>
              <DialogContent>
                <form
                  onSubmit={handleSubmit(handleConfirmOrder)}
                  className=" w-[500px] flex  flex-col  gap-2 p-3 px-20 mb-10"
                >
                  <div className="flex items-center gap-2 flex-1 ">
                    <label htmlFor="">Customer</label>
                    <input
                      type="text"
                      className="border border-slate-300 rounded-md p-2 "
                      {...register("customer", { required: true })}
                    />
                  </div>
                  {errors.customer && (
                    <span className="text-red-300">Cuatomer is required</span>
                  )}
                  <div className="flex  gap-2 flex-1 items-center">
                    <label htmlFor="">Phone number</label>
                    <input
                      type="text"
                      className="border border-slate-300 rounded-md p-2 "
                      {...register("phoneNumber", { required: true })}
                    />
                  </div>
                  {errors.phoneNumber && (
                    <span className="text-red-300">
                      Phone number is required
                    </span>
                  )}
                  <div className="mb-5">
                    <div className="flex w-full p-2 gap-2 items-center">
                      <select
                        {...register("payment")}
                        className="w-[200px]  p-2 text-slate-500 text-sm"
                      >
                        <option value="cash">Cash</option>
                        <option value="e-cash">E-payment</option>
                      </select>
                    </div>
                    {errors.payment && (
                      <span className="text-red-300">
                        Payment method is required
                      </span>
                    )}
                    <div className="flex items-center justify-between  mt-10 w-full">
                      <Button variant="outlined">Confirm Order</Button>
                      <Button
                        variant="outlined"
                        color="primary"
                        onClick={handlePaystack}
                      >
                        Continue with paystack
                      </Button>
                    </div>
                  </div>
                </form>
              </DialogContent>
            </ModalDialog>
          </Modal>
        )}
      </Transition>
    </React.Fragment>
  );
}
